CREATE VIEW AA_REP_NL_OPENING_BALS_VIEW
/*
** Written:     07/12/2005 RV
** Last Amended: 03/05/06 SB
** Comments: returns nominal account opening balances, YTD and current balances for crystal reports
*/
AS

SELECT

NL_ACCOUNTS.NCODE,
NL_ACCOUNTS.NNAME,
NL_ACCOUNTS.NOPENBALYEAR,
NL_ACCOUNTS.NBALANCE,
NL_ACCOUNTS.NCURRENCYCODE,
NL_ACCOUNTS.NOPENBALYR_C,
NL_ACCOUNTS.NBALANCE_C,

convert(decimal(24,2), case NOMINAL_PERIOD
      when 1 then NTURNOVER_C1
      when 2 then NTURNOVER_C1 + NTURNOVER_C2
   when 3 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3
   when 4 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4
      when 5 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5
   when 6 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6
   when 7 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7
      when 8 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8
   when 9 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8 + NTURNOVER_C9
   when 10 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8 + NTURNOVER_C9 + NTURNOVER_C10
      when 11 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8 + NTURNOVER_C9 + NTURNOVER_C10 + NTURNOVER_C11
   when 12 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8 + NTURNOVER_C9 + NTURNOVER_C10 + NTURNOVER_C11 + NTURNOVER_C12
   when 13 then NTURNOVER_C1 + NTURNOVER_C2 + NTURNOVER_C3 + NTURNOVER_C4 + NTURNOVER_C5 + NTURNOVER_C6 + NTURNOVER_C7 + NTURNOVER_C8 + NTURNOVER_C9 + NTURNOVER_C10 + NTURNOVER_C11 + NTURNOVER_C12 + NTURNOVER_C13
   else 0 end) AS YEAR_TO_DATE,

convert(decimal(24,2), case NOMINAL_PERIOD
      when 1 then NTURNOVER_C1_C
      when 2 then NTURNOVER_C1_C + NTURNOVER_C2_C
   when 3 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C
   when 4 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C
      when 5 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C
   when 6 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C
   when 7 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C
      when 8 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C
   when 9 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C + NTURNOVER_C9_C
   when 10 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C + NTURNOVER_C9_C + NTURNOVER_C10_C
      when 11 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C + NTURNOVER_C9_C + NTURNOVER_C10_C + NTURNOVER_C11_C
   when 12 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C + NTURNOVER_C9_C + NTURNOVER_C10_C + NTURNOVER_C11_C + NTURNOVER_C12_C
   when 13 then NTURNOVER_C1_C + NTURNOVER_C2_C + NTURNOVER_C3_C + NTURNOVER_C4_C + NTURNOVER_C5_C + NTURNOVER_C6_C + NTURNOVER_C7_C + NTURNOVER_C8_C + NTURNOVER_C9_C + NTURNOVER_C10_C + NTURNOVER_C11_C + NTURNOVER_C12_C + NTURNOVER_C13_C
   else 0 end) AS YEAR_TO_DATE_C,

NL_ACCOUNTS.NMAJORHEADCODE,
NL_ACCOUNTS.NCATEGORYCODE1,
NL_ACCOUNTS.NCATEGORYCODE2,
NL_ACCOUNTS.NCATEGORYCODE3,
NL_ACCOUNTS.NCATEGORYCODE4,
NL_ACCOUNTS.NCATEGORYCODE5,
NL_ACCOUNTS.NCATEGORYCODE6,
NL_ACCOUNTS.NCATEGORYCODE7,
NL_ACCOUNTS.NCATEGORYCODE8,
NL_ACCOUNTS.N_EXCLUDE_RECREP,
NL_ACCOUNTS2.N_LEVEL

FROM NL_ACCOUNTS

   INNER JOIN NL_ACCOUNTS2
   ON NL_ACCOUNTS.N_PRIMARY = NL_ACCOUNTS2.N_PRIMARY_2

   Inner join SYS_DATAINFO with ( nolock ) on SYS_PRIMARY = 1

WHERE N_EXCLUDE_RECREP <> 1
